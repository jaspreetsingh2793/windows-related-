{
  "Tactic": ["Credential Access"],
  "ID":["T1003"],
  "Reference":"https://github.com/Cyb3rWard0g/ThreatHunter-Playbook/blob/master/tactical_groups/credential_access/in_memory_mimikatz.md",
  "Name":"In-Memory Mimikatz",
  "Description":"Technique of reflectively loading Mimikatz into Memory. Mainly used to dump credentials without touching disk.",
  "Hypothesis":"Adversaries might be executing Mimikatz in memory with the help of PowerShell in order to dump credentials in my environment.",
  "Events" : [
	{
		"Source":"Sysmon",
		"EventId":"10",
		"Field":"GrantedAccess",
		"Details":"0x1010, 0x1410, 0x1438, 0x143a, 1418"
	},
	{
		"Source":"Sysmon",
		"EventId":"10",
		"Field":"SourceImage",
		"Details":"powershell.exe"
	},
	{
		"Source":"Sysmon",
		"EventId":"10",
		"Field":"TargetImage",
		"Details":"lsass.exe"
	},
	{
		"Source":"Sysmon",
		"EventId":"10",
		"Field":"CallTrace",
		"Details":"ntdll.dll+[a-zA-Z0-9]{1,}|\\KERNELBASE.dll+[a-zA-Z0-9]{1,}|UNKNOWN([a-zA-Z0-9]{16})"
	},
	{
		"Source":"Sysmon",
		"EventId":"7",
		"Field":"ImageLoaded",
		"Details":"WinSCard.dll, cryptdll.dll, hid.dll, samlib.dll, vaultcli.dll"
	}],
  "Hunter Notes":"GrantedAccess code 0x1010 is the new permission Mimikatz v.20170327 uses for command \"sekurlsa::logonpasswords\": 0x00000010 = VMRead, 0x00001000 = QueryLimitedInfo, GrantedAccess code 0x1010 is less common than 0x1410. Out of all the Modules that Mimikatz needs to function, the 5 above are the ones with less false positives. WMINet_Utils.dll is optional since it is loaded by scripts developed by PowerSploit and Empire projects (Invoke-Mimikatz.ps1). Look for PowerShell.exe accessing Lsass.exe with a potential CallTrace Pattern: C:\\Windows\\SYSTEM32\\ntdll.dll+[a-zA-Z0-9]{1,}|\\KERNELBASE.dll+[a-zA-Z0-9]{1,}|UNKNOWN([a-zA-Z0-9]{16}). Remember that an attacker can easily run Mimikatz or other credential dumping tool under a different process. This hypothesis is focusing on PowerShell as a process hosting the script. However, you can change this hypothesis to look for other Microsoft signed binaries or any process in the system. The idea is to focus on the patterns of behavior. You could use a stack counting technique to stack all the values of the permissions invoked by processes accessing Lsass.exe. You will have to do some filtering to reduce the number of false positives. You could then group the results with other events such as modules being loaded (EID 7). A time window of 1-2 seconds could help to get to a reasonable number of events for analysis",
  "Hunting Techniques Recommended": [
	"Grouping",
	"Searching",
	"Stack Counting"
	]
}